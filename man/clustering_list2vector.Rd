% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cluster_utils.R
\name{clustering_list2vector}
\alias{clustering_list2vector}
\title{Transform clustering_list to clustering_vector}
\usage{
clustering_list2vector(clustering_list)
}
\arguments{
\item{clustering_list}{A list of named elements representing division of nodes into clusters, assumed to be built with the convention of \code{HCCSim_clustering_list}. Function does not require that argument to be object of the mentioned class but assumes it posseses the same attributes as such object and is structured similarly (attribute \code{domain_size} being crucial!).}
}
\value{
An integer vector for which \code{clustering_vector[i]} gives a label of the group to which node \code{i} belongs. An object of class \code{HCCSim_clustering_vector} with attribute \code{params} copied from the input \code{clustering_list}.
}
\description{
\code{clustering_list} is a list of named elements. Each element represents one proper cluster of nodes and contains integers denoting nodes belonging to that cluster.
Name of the element is the cluster label (integer converted to string, e.g. for two proper clusters, there are two elements '1' and '2').
Note that info on clusterless, "noise" nodes is deduced by taking into the account which integers are not contained inside proper clusters.
This requires using attribute \code{'domain_size'} to store the total number of nodes in the network which was clustered.
It posesses additional attribute \code{'params'} which stores optional additional parameters of the clustering algorithm used.
\code{clustering_vector} is an integer vector for which \code{clustering_vector[i]} gives a label of the group to which node \code{i} belongs.
It posesses additional attribute \code{'params'} which stores optional additional parameters of the clustering algorithm used.
Labels of proper clusters start from 1. Zero label denotes the "noise" subset of nodes not belonging to any proper cluster.
}
\examples{
data(brca_clusters)
cl_vec<-HCCSim_clustering_vector(brca_clusters, params= =list(algorithm='mcl', inflation=2)) 
table(cl_vec)
clustering_vector2list( cl_vec )-> cl_list
lapply(cl_list, length)
clustering_list2vector(cl_list) -> cl_vec2
all( cl_vec == cl_vec2)
}
