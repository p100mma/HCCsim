% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/HCS.R
\name{get_cloned_dataset}
\alias{get_cloned_dataset}
\title{Simulate data using output of HCR and a set of synthetic principal components.}
\usage{
get_cloned_dataset(
  X,
  hcluster_blockPCA,
  hclustering_list,
  cloned_PCmatrix,
  noise_variances = NULL,
  uncenter = TRUE
)
}
\arguments{
\item{X}{An input dataset matrix where rows are samples and columns variables}

\item{hcluster_blockPCA}{Reconstructions of blocks defined by clusters from \code{hclustering_list}. Produced by \code{sublusterNreconstruct} or by \code{initial_clusterNreconstruct} or \code{blockwise_PCA_reconstruction}.}

\item{hclustering_list}{A list encoding cluster membership, such as one produced by \code{subclusterNreconstruct} or \code{subdivide_cluster} or an instance of \code{HCCSim_clustering_list}.}

\item{cloned_PCmatrix}{Matrix of PCs simulating PCs in \code{hcluster_blockPCA}. Number of rows of that matrix determines number of samples to generate in output dataset. Can be generated by \code{cloned_normalPC_matrix} or \code{cloned_metalogPC_matrix} functions.}

\item{noise_variances}{A vector of variances of random noise to add to each synthetic variable. Has to be of length equal to number of columns of \code{X}. Such addition of random noise is performed if this argument is not NULL. Without adding random noise, generated data has lower variance and amplified correlations.}

\item{uncenter}{If \code{TRUE}, then means of \code{X} will be added back to synthetic data. Otherwise, generated data is zero centered.}
}
\value{
A matrix of dimension \code{nrow(cloned_PCmatrix)} x \code{ncol(X)}, containing synthetic data, generated by using PCs from \code{cloned_PCmatrix} and original coefficients of linear combinations of PCs from \code{hcluster_blockPCA}.
}
\description{
Simulate data using output of HCR and a set of synthetic principal components.
}
\details{
This function does majority of the HCS method. It uses HCD of the input data \code{X} supplied in form of
\code{hcluster_blockPCA} and \code{hclustering_list} along with precomputed set of synthetic PCs of clusters
and subclusters in HCD (synthetic PCs are in \code{cloned_PCmatrix}. First two components can be produced by
functions \code{subclusterNreconstruct} or \code{initial_clusterNreconstruct}.
\code{cloned_PCmatrix} should contain as columns simulations of PCs of each cluster and subcluster,
independent from original data (can be produced by \code{cloned_normalPC_matrix} or \code{cloned_metalogPC_matrix}).
}
\examples{
data(brca)
data(brca_clusters)
lvl1<- initial_clusterNreconstruct(X= brca, X_variances=matrixStats::colVars(brca),
			        clustering_vector=brca_clusters)
lvl2<- subclusterNreconstruct(X=brca,
				 X_variances= matrixStats::colVars(brca),
				 hclustering_list= lvl1$clustering_list,
                              hcluster_PCA_blocks=lvl1$cluster_blockPCA,
                              clfun2=similarity_based_hclust,
                              clfun2OtherArgs_constant=list(method="complete" ),
			 clfun2OtherArgs_ranges= list(n_group=2:7)) 

## 2 level HCS(n): normal distribution of PCs
PC_generator_matrix( lvl2$hcluster_blockPCA) -> PCmat2
cloned_PC_N<- cloned_normalPC_matrix(PCmat2)
#compute missing variance of 2lvl rec.
X_r2<- get_full_reconstruction(brca, lvl2$hcluster_blockPCA, lvl2$hclustering_list,
				  add_noise=FALSE) #crucial arg to compute missing variance properly!
noise_variances2<- matrixStats::colVars(brca-X_r2)
X_s2<- get_cloned_dataset(brca, lvl2$hcluster_blockPCA, 
			lvl2$hclustering_list,
			cloned_PC_N,
				noise_variances= noise_variances2)

## 1 lvl HCS(f): metalog distribution fitting on PCs 
PC_generator_matrix( lvl1$cluster_blockPCA) -> PCmat1
meta_list<- list()
for (j in 1:ncol(PCmat1))  rmetalog::metalog(PCmat1[,j], term_limit=5, step_len=.01) -> meta_list[[j]]
HN_PCmat<- hidden_normalPC_matrix(PCmat1, meta_list, rep(5, length(meta_list) ) )
### note: we can generate any number of samples, say 1000
cloned_metaPC<- cloned_metalogPC_matrix(HN_PCmat, meta_list, rep(5, length(meta_list)),  n_samples= 1000 )
#compute missing variancce of 1lvl rec.
X_r1<- get_full_reconstruction(brca, lvl1$cluster_blockPCA, lvl1$clustering_list,
				  add_noise=FALSE)
noise_variances1<- matrixStats::colVars(brca-X_r1)
X_s1<- get_cloned_dataset(brca, lvl1$cluster_blockPCA, 
			lvl1$clustering_list,
			cloned_metaPC,
				noise_variances= noise_variances1)
}
\seealso{
\code{\link[=cloned_normalPC_matrix]{cloned_normalPC_matrix()}}, \code{\link[=cloned_metalogPC_matrix]{cloned_metalogPC_matrix()}} for how to generate synthetic PCs, \code{\link[=subclusterNreconstruct]{subclusterNreconstruct()}} ,\code{\link[=initial_clusterNreconstruct]{initial_clusterNreconstruct()}} for how to generate input data for this function, \code{\link[=get_full_reconstruction]{get_full_reconstruction()}} for reconstructing original data and producing output data correlated with original
}
